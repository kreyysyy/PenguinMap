{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FILE_GeoJSON","App","props","SELECT_ALL","state","lng","lat","zoom","penguinNumMax","dropdownPlace","dropdownPlaceSelected","checkboxPenguin","Map","set","geojson","map","checkboxPenguinChanged","bind","dropdownPlaceChanged","this","createMap","readGeoJSON","Form","Group","controlId","Label","Control","as","custom","value","onChange","item","Array","from","keys","key","checked","get","Check","type","label","replace","Container","fluid","Row","Col","xs","sm","md","lg","xl","className","ref","el","mapContainer","id","align","fetch","response","json","console","log","features","x","properties","penguin_num","reduce","a","b","Math","max","places","Set","place","sort","f","penguin","split","p","add","penguins","box","setState","mapboxgl","container","style","version","sources","OSM","tiles","tileSize","layers","source","glyphs","attributionControl","customAttribution","center","on","addSource","data","addLayer","layout","paint","getCenter","getZoom","popup","Popup","closeButton","closeOnClick","e","getCanvas","cursor","coordinates","geometry","slice","penguinsHTML","join","description","abs","lngLat","setLngLat","setHTML","addTo","remove","event","target","loaded","setFilter","boxState","check","isAllChecked","val","placeSet","includes","React","Component","GraphPenguinNumPerPlace","graph","y","orientation","title","showlegend","margin","t","height","xaxis","side","yaxis","automargin","config","responsive","displayModeBar","GraphPlaceNumPerPenguin","penNum","pens","pen","has","penNumArray","push","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c2ef67f.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport mapboxgl from \"mapbox-gl\"; // or \"const mapboxgl = require('mapbox-gl');\"\nimport Plot from \"react-plotly.js\";\n\nconst FILE_GeoJSON = \"./Place_PenguinList.geojson\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.SELECT_ALL = \"＜全て＞\";\n\n    this.state = {\n      lng: 136,\n      lat: 37,\n      zoom: 3.5,\n      penguinNumMax: 0,\n      dropdownPlace: [],\n      dropdownPlaceSelected: this.SELECT_ALL,\n      checkboxPenguin: new Map().set(this.SELECT_ALL, true),\n      geojson: null,\n    };\n\n    this.map = null;\n\n    this.checkboxPenguinChanged = this.checkboxPenguinChanged.bind(this);\n    this.dropdownPlaceChanged = this.dropdownPlaceChanged.bind(this);\n  }\n\n  componentDidMount() {\n    this.createMap();\n    this.readGeoJSON();\n  }\n\n  render() {\n    let checkboxPenguin = null; // チェックボックス（ペンギン）\n    let dropdownPlace = null; // ドロップダウンリスト（動物園・水族館名）\n\n    // ドロップダウンリスト（動物園・水族館）を用意する\n    dropdownPlace = (\n      <Form>\n        <Form.Group controlId=\"exampleForm.SelectCustom\">\n          <Form.Label>動物園・水族館</Form.Label>\n          <Form.Control\n            as=\"select\"\n            custom\n            value={this.state.dropdownPlaceSelected}\n            onChange={this.dropdownPlaceChanged}\n          >\n            {this.state.dropdownPlace.map((item) => (\n              <option key={item} value={item}>\n                {item}\n              </option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n      </Form>\n    );\n\n    // チェックボックス（ペンギン）を用意する\n    checkboxPenguin = (\n      <Form>\n        <Form.Label>ペンギン</Form.Label>\n        {Array.from(this.state.checkboxPenguin.keys()).map((key) => {\n          const checked = this.state.checkboxPenguin.get(key);\n          return (\n            <Form.Check\n              key={key}\n              value={key}\n              type=\"checkbox\"\n              checked={checked}\n              label={key.replace(/ペンギン$/, \"\")}\n              onChange={this.checkboxPenguinChanged}\n            />\n          );\n        })}\n      </Form>\n    );\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col xs={12} sm={8} md={9} lg={5} xl={6}>\n            <div className=\"container-frame\">\n              {/** マップの<div>で装飾を行うと地図上でポップアップ位置がズレるため、外側の<div>で装飾する */}\n              <div\n                ref={(el) => (this.mapContainer = el)}\n                className=\"map-container\"\n              />\n              <div className=\"map-overlay\">\n                <div className=\"map-title\">\n                  <h5>ペンギンマップ</h5>\n                  ペンギンがいる動物園・水族館\n                </div>\n                <div id=\"legend\" className=\"map-legend\">\n                  飼育されているペンギンの種類数\n                  <div className=\"map-legend-bar\"></div>\n                  <table className=\"map-legend-bar-text\">\n                    <tbody>\n                      <tr>\n                        <td align=\"left\">1</td>\n                        <td align=\"right\">{this.state.penguinNumMax}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </Col>\n          <Col xs={4} sm={4} md={3} lg={3} xl={2}>\n            <div className=\"container-frame\">\n              <div className=\"selector-container\">\n                {dropdownPlace}\n                {checkboxPenguin}\n              </div>\n            </div>\n          </Col>\n          <Col xs={8} sm={12} md={12} lg={4} xl={4}>\n            <GraphPenguinNumPerPlace\n              geojson={this.state.geojson}\n            ></GraphPenguinNumPerPlace>\n            <GraphPlaceNumPerPenguin\n              geojson={this.state.geojson}\n            ></GraphPlaceNumPerPenguin>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  /**\n   * GeoJSONファイルを読み込む\n   */\n  async readGeoJSON() {\n    const response = await fetch(FILE_GeoJSON);\n    const geojson = await response.json();\n    console.log(\"read file: \" + FILE_GeoJSON);\n\n    const penguinNumMax = geojson.features\n      .map((x) => x.properties.penguin_num)\n      .reduce((a, b) => Math.max(a, b));\n\n    // 動物園・水族館の配列\n    const places = Array.from(\n      new Set(geojson.features.map((x) => x.properties.place))\n    ).sort();\n\n    // ペンギンの配列\n    const set = new Set();\n    for (let f of geojson.features)\n      for (let p of f.properties.penguin.split(\"_\")) set.add(p);\n    const penguins = Array.from(set).sort();\n\n    // チェックボックスの状態を初期化\n    const box = new Map();\n    box.set(this.SELECT_ALL, true);\n    for (let penguin of penguins) box.set(penguin, true);\n\n    this.setState({\n      geojson: geojson,\n      penguinNumMax: penguinNumMax,\n      // ドロップダウンリストの状態を初期化\n      dropdownPlace: [this.SELECT_ALL, ...places],\n      dropdownPlaceSelected: this.SELECT_ALL,\n      // チェックボックスの状態を初期化\n      checkboxPenguin: box,\n    });\n  }\n\n  /**\n   * マップを作成する\n   */\n  createMap() {\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: {\n        version: 8,\n        sources: {\n          OSM: {\n            type: \"raster\",\n            tiles: [\n              \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n              \"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n              \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            ],\n            tileSize: 256,\n          },\n        },\n        layers: [\n          {\n            id: \"OSM\",\n            type: \"raster\",\n            source: \"OSM\",\n            //minzoom: 0,\n            //maxzoom: 18,\n          },\n        ],\n        glyphs: \"https://fonts.openmaptiles.org/{fontstack}/{range}.pbf\",\n      },\n      attributionControl: true,\n      customAttribution: [\n        'Map: © <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors',\n        'Data: refer to <a href=\"https://www.jaza.jp/\" target=\"_blank\">JAZA (2020/12/7)</a>',\n      ],\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n    });\n\n    // load時の処理を登録\n    this.map.on(\"load\", () => {\n      this.map.addSource(\"source-place\", {\n        type: \"geojson\",\n        data: FILE_GeoJSON,\n      });\n      this.map.addLayer({\n        id: \"layer-place\",\n        type: \"circle\",\n        source: \"source-place\",\n        layout: {},\n        paint: {\n          \"circle-stroke-width\": 1,\n          \"circle-stroke-color\": \"black\",\n          \"circle-color\": [\n            \"interpolate\",\n            [\"linear\"],\n            [\"get\", \"penguin_num\"],\n            1,\n            \"blue\",\n            this.state.penguinNumMax / 2.0,\n            \"yellow\",\n            this.state.penguinNumMax,\n            \"red\",\n          ],\n        },\n      });\n      this.map.addLayer({\n        id: \"layer-place-label\",\n        type: \"symbol\",\n        source: \"source-place\",\n        layout: {\n          \"text-field\": [\"format\", [\"get\", \"place\"]],\n          \"text-anchor\": \"bottom\",\n          \"text-radial-offset\": 0.7,\n          \"text-font\": [\"Open Sans Regular\"],\n        },\n        paint: {\n          \"text-halo-width\": 2,\n          \"text-halo-color\": \"rgba(255, 255, 255, 255)\",\n        },\n      });\n    });\n\n    // move時の処理を登録\n    this.map.on(\"move\", () => {\n      this.setState({\n        lng: this.map.getCenter().lng,\n        lat: this.map.getCenter().lat,\n        zoom: this.map.getZoom(),\n      });\n    });\n\n    // Create a popup, but don't add it to the map yet.\n    const popup = new mapboxgl.Popup({\n      closeButton: false,\n      closeOnClick: false,\n    });\n\n    this.map.on(\"mouseenter\", \"layer-place\", (e) => {\n      // Change the cursor style as a UI indicator.\n      this.map.getCanvas().style.cursor = \"pointer\";\n\n      const coordinates = e.features[0].geometry.coordinates.slice();\n\n      const penguins = e.features[0].properties.penguin.split(\"_\");\n      const penguinsHTML =\n        \"<ul>\" + penguins.map((x) => \"<li>\" + x + \"</li>\").join(\"\") + \"</ul>\";\n      const placeHTML = \"<h6>\" + e.features[0].properties.place + \"</h6>\";\n      const description = placeHTML + penguinsHTML;\n\n      // Ensure that if the map is zoomed out such that multiple\n      // copies of the feature are visible, the popup appears\n      // over the copy being pointed to.\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      }\n\n      // Populate the popup and set its coordinates\n      // based on the feature found.\n      popup.setLngLat(coordinates).setHTML(description).addTo(this.map);\n    });\n\n    this.map.on(\"mouseleave\", \"layer-place\", () => {\n      this.map.getCanvas().style.cursor = \"\";\n      popup.remove();\n    });\n  }\n\n  /**\n   * イベントハンドラ\n   * @param {*} event\n   */\n  dropdownPlaceChanged(event) {\n    const item = event.target.value;\n\n    // マップにフィルタを適用\n    if (this.map.loaded()) {\n      if (item === this.SELECT_ALL) {\n        this.map.setFilter(\"layer-place\", null);\n        this.map.setFilter(\"layer-place-label\", null);\n      } else {\n        this.map.setFilter(\"layer-place\", [\"==\", [\"get\", \"place\"], item]);\n        this.map.setFilter(\"layer-place-label\", [\"==\", [\"get\", \"place\"], item]);\n      }\n    }\n\n    this.setState({ dropdownPlaceSelected: item });\n  }\n\n  /**\n   * イベントハンドラ\n   * @param {*} event\n   */\n  checkboxPenguinChanged(event) {\n    // 状態を更新\n    const boxState = this.state.checkboxPenguin;\n    const item = event.target.value;\n    const check = event.target.checked;\n    boxState.set(item, !boxState.get(item));\n    if (item === this.SELECT_ALL)\n      for (let key of boxState.keys()) boxState.set(key, check);\n    else if (check) {\n      let isAllChecked = true;\n      for (let [key, val] of boxState)\n        if (key !== this.SELECT_ALL && val === false) {\n          isAllChecked = false;\n          break;\n        }\n      if (isAllChecked) boxState.set(this.SELECT_ALL, true);\n    } else boxState.set(this.SELECT_ALL, false);\n\n    // マップにフィルタを適用\n    const placeSet = new Set();\n    for (let [key, val] of boxState)\n      if (val)\n        for (let f of this.state.geojson.features)\n          if (f.properties.penguin.includes(key))\n            placeSet.add(f.properties.place);\n    const places = Array.from(placeSet);\n    if (this.map.loaded()) {\n      this.map.setFilter(\"layer-place\", [\n        \"in\",\n        [\"get\", \"place\"],\n        [\"literal\", places],\n      ]);\n      this.map.setFilter(\"layer-place-label\", [\n        \"in\",\n        [\"get\", \"place\"],\n        [\"literal\", places],\n      ]);\n    }\n\n    this.setState({ checkboxPenguin: boxState });\n  }\n}\n\n/**\n * グラフ（飼育種類数）\n */\nclass GraphPenguinNumPerPlace extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      geojson: props.geojson,\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({ geojson: props.geojson });\n  }\n\n  render() {\n    const geojson = this.state.geojson;\n    if (geojson != null) {\n      const features = [...geojson.features];\n      features.sort(\n        (a, b) => a.properties.penguin_num - b.properties.penguin_num\n      );\n      return (\n        <div className=\"container-frame\">\n          <div className=\"graph-container\">\n            <Plot\n              className=\"graph\"\n              ref={(el) => (this.graph = el)}\n              data={[\n                {\n                  type: \"bar\",\n                  x: features.map((x) => x.properties.penguin_num),\n                  y: features.map((y) => y.properties.place),\n                  orientation: \"h\",\n                },\n              ]}\n              layout={{\n                title: \"飼育種類数\",\n                showlegend: false,\n                margin: { t: 50 },\n                height: 2000,\n                xaxis: { side: \"top\" },\n                yaxis: { automargin: true },\n              }}\n              config={{ responsive: true, displayModeBar: false }}\n            />\n          </div>\n        </div>\n      );\n    } else return null;\n  }\n}\n\n/**\n * グラフ（飼育館数）\n */\nclass GraphPlaceNumPerPenguin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      geojson: props.geojson,\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({ geojson: props.geojson });\n  }\n\n  render() {\n    const geojson = this.state.geojson;\n    if (geojson != null) {\n      const features = [...geojson.features];\n      const penNum = new Map();\n      for (let f of features) {\n        let pens = f.properties.penguin.split(\"_\");\n        for (let pen of pens) {\n          pen = pen.replace(/ペンギン$/, \"\");\n          if (penNum.has(pen)) penNum.set(pen, penNum.get(pen) + 1);\n          else penNum.set(pen, 0);\n        }\n      }\n      const penNumArray = [];\n      for (let [key, val] of penNum) penNumArray.push({ pen: key, num: val });\n      penNumArray.sort((a, b) => a.num - b.num);\n      return (\n        <div className=\"container-frame\">\n          <div className=\"graph-container\">\n            <Plot\n              className=\"graph\"\n              ref={(el) => (this.graph = el)}\n              data={[\n                {\n                  type: \"bar\",\n                  x: penNumArray.map((x) => x.num),\n                  y: penNumArray.map((y) => y.pen),\n                  orientation: \"h\",\n                },\n              ]}\n              layout={{\n                title: \"飼育館数\",\n                showlegend: false,\n                margin: { t: 50 },\n                height: 400,\n                xaxis: { side: \"top\" },\n                yaxis: { automargin: true },\n              }}\n              config={{ responsive: true, displayModeBar: false }}\n            />\n          </div>\n        </div>\n      );\n    } else return null;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}